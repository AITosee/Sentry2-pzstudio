/*
 * This file is part of the MicroPython project, http://micropython.org/
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013, 2014 Damien P. George
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// *FORMAT-OFF*

#include "py/mpconfig.h"

// All the qstr definitions in this file are available as constants.
// That is, they are in ROM and you can reference them simply as MP_QSTR_xxxx.

// qstr configuration passed to makeqstrdata.py of the form QCFG(key, value)
QCFG(BYTES_IN_LEN, MICROPY_QSTR_BYTES_IN_LEN)
QCFG(BYTES_IN_HASH, MICROPY_QSTR_BYTES_IN_HASH)

Q()
Q(*)
Q(_)
Q(/)
#if MICROPY_PY_BUILTINS_STR_OP_MODULO
Q(%#o)
Q(%#x)
#else
Q({:#o})
Q({:#x})
#endif
Q(__del__)
Q({:#b})
Q( )
Q(\n)
Q(maximum recursion depth exceeded)
Q(<module>)
Q(<lambda>)
Q(<listcomp>)
Q(<dictcomp>)
Q(<setcomp>)
Q(<genexpr>)
Q(<string>)
Q(<stdin>)
Q(utf-8)
Q(upload)
Q(listdir)
Q(write)
Q(flush)
Q(uio)
Q(IOBase)
Q(resource_stream)
Q(StringIO)
Q(delattr)
Q(BytesIO)
Q(BufferedWriter)
Q(uarray)
Q(array)
Q(append)
Q(extend)
Q(decode)
Q(seek)
Q(getvalue)
Q(tell)
Q(led)
Q(init)
Q(on)
Q(off)
Q(mode)
Q(time)
Q(sleep)
Q(usleep)
Q(msleep)
Q(_slash_lib)
Q(tick_ms)
Q(OLED)
Q(addr)
/**************ext_devcie**************/
Q(ext_device)
Q(Ttp229)
Q(get_key)
Q(scl)
Q(sdo)
Q(trig)
Q(echo)
Q(Ultrasonic)
Q(distance)
Q(Dhtxx)
Q(PMxx)
Q(get_pm1_0)
Q(get_pm2_5)
Q(get_pm10)

/**************ext_devcie**************/
/***************OLED*******************/
Q(init)
Q(clear)
Q(fill_screen)
Q(fill_line)
Q(flush)
Q(pixel)
Q(hline)
Q(vline)
Q(line)
Q(draw_arc)
Q(draw_circle_helper)
Q(fill_circle_helper)
Q(draw_circle)
Q(fill_circle)
Q(draw_rectangle)
Q(fill_rectangle)
Q(draw_round_rectangle)
Q(fill_round_rectangle)
Q(draw_ellipse)
Q(fill_ellipse)
Q(draw_ellipse_rect)
Q(draw_triangle)
Q(fill_triangle)
Q(line_of_arc)
Q(line_of_kedu)
Q(bit_map)
Q(show_str)
Q(show_str_line)
Q(WHITE)
Q(BLACK)
/***************OLED*******************/
/***************matrix*****************/
Q(MATRIX_SCREEN)
Q(show_string)
Q(show_char)
Q(show_matrix)
Q(dot)
/***************matrix*****************/
/***************aht2x******************/
Q(AHT2X)
Q(temp)
Q(humi)
/***************aht2x******************/
Q(TOUCH_PAD)
Q(MIC)
Q(LIGHT_SENSOR)
Q(machine)
Q(umachine)
Q(Pin)
Q(value)
Q(pull)
Q(mode)
Q(IN)
Q(OUT)
Q(ADC)
Q(voltage)
Q(PULL_UP)
Q(PULL_DOWN)
Q(device)
Q(recognition)
Q(US516P6)
Q(initKey)
Q(getKey)
Q(BEEP)
Q(icm_init)
Q(us516p6)
Q(init)
Q(deinit)
Q(player)
Q(stop)
Q(init_sensor)
Q(read_gyro)
Q(read_acc)
Q(network)
Q(connectWifi)
Q(isconnected)
Q(disconnectWifi)
Q(startHotspot)
Q(stopHotspot)
Q(is_activate)
Q(ifconfig)
Q(socket)
Q(setsockopt)
Q(connect)
Q(AF_INET)
Q(AF_INET6)
Q(SOCK_STREAM)
Q(SOCK_DGRAM)
Q(SOCK_RAW)
Q(SOL_SOCKET)
Q(SO_REUSEADDR)
Q(SO_BROADCAST)
Q(recv)
Q(bind)
Q(listen)
Q(accept)
Q(sendto)
Q(recvfrom)
Q(_thread)
Q(LockType)
Q(SemephareType)
Q(get_ident)
Q(stack_size)
Q(start_new_thread)
Q(allocate_lock)
Q(allocate_semephare)
Q(acquire)
Q(release)
Q(locked)
Q(lock)
Q(semephare)
Q(count)
Q(UART)
Q(PWM)
Q(duty)
Q(baudrate)
Q(bits)
Q(stop)
Q(parity)
Q(timeout)
Q(timeout_char)
Q(init)
Q(deinit)
Q(any)
Q(read)
Q(uart_init)
Q(readline)
Q(readinto)
Q(write)
Q(sendbreak)
Q(I2C)
Q(LED)
Q(BUTTON)
Q(Servo)
Q(freq)
Q(writeString)
Q(read)
Q(init_acc)
Q(read_acc)
Q(IMU)
Q(acc)
Q(gyro)
Q(angle)
Q(DF_MOTOR)
Q(speed)
Q(stop)
Q(fan)
Q(get_flame)
Q(getKey)
Q(getTQKey)
Q(setLed)
Q(getLightness)
Q(getTQLightness)
Q(setMotor)
Q(setDigital)
Q(setDoubleDigital)
Q(getDigital)
Q(getDoubleDigital)
Q(setAnalog)
Q(getAnalog)
Q(setServo)
Q(getSoil)
Q(getSoil)
Q(getTouch)
Q(getTQTouch)
Q(ultraSonic)
Q(getVoice)
Q(getTQVoice)
Q(initAHT2X)
Q(getAHT2X)
Q(set_color)
Q(configHotspot)
/***************Sentry******************/
Q(CameraSetAwb)
Q(Get)
Q(GetImageShape)
Q(GetQrCodeValue)
Q(GetValue)
Q(GetVisionState)
Q(LOG_CRITICAL)
Q(LOG_DEBUG)
Q(LOG_ERROR)
Q(LOG_INFO)
Q(LOG_NOTSET)
Q(LOG_OFF)
Q(LOG_WARNING)
Q(LedSetColor)
Q(Read)
Q(SENTRY_CHECK_ERROR)
Q(SENTRY_FAIL)
Q(SENTRY_OK)
Q(SENTRY_READ_TIMEOUT)
Q(SENTRY_UNKNOWN_PROTOCOL)
Q(SENTRY_UNSUPPORT_PARAM)
Q(SENTRY_WRITE_TIMEOUT)
Q(SensorInit)
Q(SensorSetDefault)
Q(SensorSetRestart)
Q(Sentry)
Q(SentryI2CMethod)
Q(Set)
Q(SetDebug)
Q(SetParam)
Q(SetParamNum)
Q(UpdateResult)
Q(VisionBegin)
Q(VisionEnd)
Q(VisionGetStatus)
Q(VisionSetDefault)
Q(VisionSetStatus)
Q(VisionState)
Q(begin)
Q(cols)
Q(kAirplane)
Q(kAutoWhiteBalance)
Q(kBValue)
Q(kBicycle)
Q(kBird)
Q(kBoat)
Q(kBottle)
Q(kBus)
Q(kCar)
Q(kCardCheck)
Q(kCardCircle)
Q(kCardCross)
Q(kCardDivide)
Q(kCardEight)
Q(kCardEqual)
Q(kCardFive)
Q(kCardForward)
Q(kCardFour)
Q(kCardGreenLight)
Q(kCardLeft)
Q(kCardMinus)
Q(kCardNine)
Q(kCardOne)
Q(kCardPark)
Q(kCardPlus)
Q(kCardRedLight)
Q(kCardRight)
Q(kCardSeven)
Q(kCardSix)
Q(kCardSpeed40)
Q(kCardSpeed60)
Q(kCardSpeed80)
Q(kCardSquare)
Q(kCardThree)
Q(kCardTriangle)
Q(kCardTurnAround)
Q(kCardTwo)
Q(kCardZero)
Q(kCat)
Q(kChair)
Q(kColorBlack)
Q(kColorBlue)
Q(kColorGreen)
Q(kColorRed)
Q(kColorWhite)
Q(kColorYellow)
Q(kCow)
Q(kDog)
Q(kGValue)
Q(kHeightValue)
Q(kHorse)
Q(kLabel)
Q(kLedBlue)
Q(kLedClose)
Q(kLedCyan)
Q(kLedGreen)
Q(kLedPurple)
Q(kLedRed)
Q(kLedWhite)
Q(kLedYellow)
Q(kLockWhiteBalance)
Q(kMonitor)
Q(kMotorBike)
Q(kPerson)
Q(kPlant)
Q(kRValue)
Q(kSheep)
Q(kSofa)
Q(kStatus)
Q(kTable)
Q(kTrain)
Q(kVision20Classes)
Q(kVisionAprilTag)
Q(kVisionBall)
Q(kVisionBlob)
Q(kVisionBody)
Q(kVisionCard)
Q(kVisionColor)
Q(kVisionCustom)
Q(kVisionFace)
Q(kVisionLearning)
Q(kVisionLine)
Q(kVisionMaxType)
Q(kVisionMotionDetect)
Q(kVisionQrCode)
Q(kWhiteBalanceCalibrating)
Q(kWhiteLight)
Q(kWidthValue)
Q(kXValue)
Q(kYValue)
Q(kYellowLight)
Q(rows)
Q(sentry1_card_label_e)
Q(sentry1_vision_e)
Q(sentry2_card_label_e)
Q(sentry2_vision_e)
Q(sentry_camera_white_balance_e)
Q(sentry_class20_label_e)
Q(sentry_color_label_e)
Q(sentry_led_color_e)
Q(sentry_obj_info_e)
/***************Sentry******************/
#if MICROPY_ENABLE_PYSTACK
Q(pystack exhausted)
#endif
